# Load necessary library
library(dplyr)
# Identify the number of duplicate rows
num_duplicates <- df %>%
duplicated() %>%
sum()
df <- read.csv('song_data.csv')
head(df)
# Load necessary library
library(dplyr)
# Identify the number of duplicate rows
num_duplicates <- df %>%
duplicated() %>%
sum()
# Remove the duplicate rows
df_unique <- df %>%
distinct()
# Print the number of duplicate rows that were removed
cat("Removed", num_duplicates, "duplicate rows.\n")
duplicates <- df_unique %>%
duplicated()
sum(duplicates == TRUE)
df <- df_unique
colnames(df)
summary(df$song_popularity)
shapiro.test(df$song_popularity)
ggdensity()
library(ggplot2)
ggdensity()
library(ggpubr)
ggdensity(df, x = 'rent_pr')
ggdensity(df, x = 'song_popularity')
ggqqplot(df$song_popularity)
scatterplotMatrix(df)
library(car)
library(car)
scatterplotMatrix(df)
sub_df <- df%>% select(-c(song_name))
sub_df
library(car)
library(dplyr)
sub_df <- df%>% select(-c(song_name))
sub_df
scatterplotMatrix(df)
scatterplotMatrix(df, regLine = TRUE)
sub_df
scatterplotMatrix(sub_df, regLine = TRUE)
ggplot(df, aes(x = value)) +
geom_density() +
facet_wrap(~name, scales = "free")
ggp1 <-ggplot(sub_df, aes(x = value)) +
geom_density() +
facet_wrap(~name, scales = "free")
ggp1
ggp1 <-ggplot(sub_df, aes(x = value)) +
geom_histogram() +
facet_wrap(~ name, scales = "free")
ggp1
sub_df
for (x in colnames(sub_df)){
ggdensity(df, x = x)
}
colnames(sub_df)
for (x in colnames(sub_df)){
ggdensity(sub_df, x = x)
}
for (x in colnames(sub_df)){
ggdensity(data =sub_df, aes(x = x))
}
colnames(sub_df)[1]
for (x in colnames(sub_df)){
ggdensity(sub_df, aes(x = x))
}
df <- read.csv('dataset\song_data.csv')
df <- read.csv('dataset/song_data.csv')
head(df)
df <- read.csv('dataset/song_data.csv')
head(df)
# Load necessary library
library(dplyr)
# Identify the number of duplicate rows
num_duplicates <- df %>%
duplicated() %>%
sum()
# Remove the duplicate rows
df_unique <- df %>%
distinct()
# Print the number of duplicate rows that were removed
cat("Removed", num_duplicates, "duplicate rows.\n")
duplicates <- df_unique %>%
duplicated()
sum(duplicates == TRUE)
df <- df_unique
summary(df$song_popularity)
shapiro.test(df$song_popularity)
ggqqplot(df$song_popularity)
library(ggplot2)
library(ggpubr)
ggdensity(df, x = 'song_popularity')
ggqqplot(df$song_popularity)
library(ggplot2)
library(ggpubr)
ggdensity(df, x = 'song_popularity')
ggdensity(df, x = "song_popularity", fill = "lightgray", title = "Song Popularity") +
stat_overlay_normal_density(color = "red", linetype = "dashed")
fileEncoding('dataset\song.data.csv')
fileEncoding('dataset\song_data.csv')
fileEncoding('dataset\\song_data.csv')
file('dataset\song_data.csv')
file('dataset\\song_data.csv')
ggqqplot(df$logpop)
df$logpop = log(df$song_popularity)
ggqqplot(df$logpop)
Encoding('dataset\\song_data.csv')
colnames(df)
library(dplyr)
library(Hmisc)
subset <- df %>% select(song_pop, song_duration_ms, tempo, danceability, energy)
library(dplyr)
library(Hmisc)
subset <- df %>% select(song_popularity, song_duration_ms, tempo, danceability, energy)
rcorr(as.matrix(subset))
subset_without_name <- df %>% select (- song_name)
rcorr(as.matrix(subset_without_name))
subset_without_name
res <- cor(subset_without_name)
round(res, 2)
subset_without_name <- df %>% select (-song_name, logpop)
subset_without_name
rcorr(as.matrix(subset_without_name))
subset_without_name <- df %>% select (-c(song_name, logpop))
subset_without_name
rcorr(as.matrix(subset_without_name))
subset_without_name <- df %>% select (-c(song_name, logpop))
res <- cor(subset_without_name)
round(res, 2)
library(dplyr)
library(Hmisc)
subset <- df %>% select(song_popularity, song_duration_ms, tempo, danceability, energy, instrumentalness, loudness)
rcorr(as.matrix(subset))
col<- colorRampPalette(c("blue", "white", "red"))(20))
col<- colorRampPalette(c("blue", "white", "red"))(20)
heatmap(x = cor(subset), col = col, symm=TRUE)
heatmap(x = cor(subset), col = col, symm=TRUE, Colv = NA, Rowv = NA)
library(PerformanceAnalytics)
chart.Correlation(subset, histogram = TRUE, pch = 19)
library(PerformanceAnalytics)
chart.Correlation(subset, histogram = TRUE, pch = 19, method = 'none')
library(PerformanceAnalytics)
chart.Correlation(subset, histogram = TRUE, pch = 19)
knitr::opts_chunk$set(echo = TRUE)
df <- read.csv('dataset\\airline_passenger_satisfaction.csv')
head(df)
df <- df[, -1]
df <- na.omit(df)
head(df)
str(df)
df$customer_class <- ifelse(df$customer_class == "Eco Plus", "Eco", df$customer_class)
df$satisfaction <- ifelse(df$satisfaction == "satisfied", 1, 0)
df$Gender <- ifelse(df$Gender == "Male", 1, 0)
df$customer_type <- ifelse(df$customer_type == "Loyal Customer", 1, 0)
df$customer_class <- ifelse(df$customer_class == 'Eco', 1, 0)
df$type_of_travel <- ifelse(df$type_of_travel == 'Personal Travel', 1, 0)
# Convert the response variable to a factor
dtrain$satisfaction <- as.factor(dtrain$satisfaction)
library(caret)
split_train_test <- createDataPartition(df$satisfaction, p=0.8, list=FALSE)
dtrain <- df[split_train_test,]
dtest <-  df[-split_train_test,]
# Convert the response variable to a factor
dtrain$satisfaction <- as.factor(dtrain$satisfaction)
dtest$satisfaction <- as.factor(dtest$satisfaction)
# Train the rpart model
tree_model <- rpart(satisfaction ~ ., data = dtrain)
library(rpart)
# Train the rpart model
tree_model <- rpart(satisfaction ~ ., data = dtrain)
# Make predictions on the test set
predictions <- predict(tree_model, newdata = dtest, type = "class")
accuracy <- sum(predictions == dtest$satisfaction) / nrow(dtest) * 100
# Print the accuracy
cat("Accuracy: ", accuracy, "%\n")
library(rpart.plot)
rpart.plot(tree_model)
library(ggplot2)
# Calculate test error rates
error_logreg <- mean(logistic_prediction_binary != test_Y)
library(tidyverse)
install.packages("palmerpenguins")
library(palmerpenguins)
library(ggthemes)
install.packages('gghtemes')
library(ggthemes)
library(ggthemes)
print(penguins)
glimps(penguins)
glimpse(penguins)
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g))
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point()
ggplot(penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point()
ggplot(
penguins, aes(x = flipper_length_mm, y = body_mass_g, color = species)) +
geom_point() +
geom_smooth( method = 'lm')
ggplot(
penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
geom_smooth(method = 'lm')
ggplot(
penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = 'lm')
ggplot(
penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species)) +
geom_smooth(method = 'lm') +
labs(title = 'Body mass and length',
subtitle = "Dimension for species",
x = 'Length', y = 'Body mass(g)',
color = 'Species', shape = 'Species')
ggplot(
penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = 'lm') +
labs(title = 'Body mass and length',
subtitle = "Dimension for species",
x = 'Length', y = 'Body mass(g)',
color = 'Species', shape = 'Species')
ggplot(
penguins, aes(x = flipper_length_mm, y = body_mass_g)) +
geom_point(aes(color = species, shape = species)) +
geom_smooth(method = 'lm') +
labs(title = 'Body mass and length',
subtitle = "Dimension for species",
x = 'Length', y = 'Body mass(g)',
color = 'Species', shape = 'Species') +
scale_color_colorblind()
ggplot(
penguins
aes(x = fct_infreq(species)) +
ggplot(
penguins,
aes(x = fct_infreq(species)) +
geom_bar
)
geom_bar()
geom_bar()
ggplot(
penguins,
aes(x = fct_infreq(species))) +
geom_bar()
ggplot(
penguins,
aes(x = fct_rev(fct_infreq(species)))) +
geom_bar()
ggplot(
penguins, aes(x = body_mass_g)) +
geom_histogram((binwidth = 200))
ggplot(
penguins, aes(x = body_mass_g)) +
geom_histogram(binwidth = 200)
ggplot(penguins, aes(x = body_mass_g)) +
geom_density()
ggplot(penguins, aes(x = body_mass_g)) +
geom_boxplot()
ggplot(penguins, aes(x = species, y = body_mass_g )) +
geom_boxplot()
ggplot(penguins, aes(x = species, y = body_mass_g )) +
geom_boxplot()
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar()
ggplot(penguins, aes(x = island, fill = species)) +
geom_bar(position = "fill")
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point()
ggplot(mpg, aes(x = displ, y = hwy)) +
geom_point() +
geom_point(
data = mpg %>% filter(class == "2seater"),
color = "red"
)
