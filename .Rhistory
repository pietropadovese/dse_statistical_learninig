)
set.seed(123)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(corrr)
library(ggradar)
library(scales)
library(tibble)
# ggradar needs to be installed from github
# > install.packages("remotes")
# > remotes::install_github("ricardo-bion/ggradar")
df <- read_csv("dataset/airline_passenger_satisfaction.csv")
# Subset the df and replace 0 with NA only in the rating variable
df[df == 0] <- NA
df <- na.omit(df)
head(df)
df <- df %>% rename(gender = Gender, cust_type = customer_type,
trav_type = type_of_travel,
class = customer_class,
distance = flight_distance,
wifi = inflight_wifi_service,
time_conv = departure_arrival_time_convenient,
onl_book = ease_of_online_booking,
gate_loc = gate_location,
food = food_and_drink,
onl_board = online_boarding,
comfort = seat_comfort,
entert = inflight_entertainment,
onb_serv  = onboard_service,
leg_room = leg_room_service,
baggage = baggage_handling,
checkin = checkin_service,
infl_serv = inflight_service,
clean = cleanliness,
dep_delay = departure_delay_in_minutes,
arr_delay = arrival_delay_in_minutes,
sat = satisfaction)
summary(df)
df <- df[-1]
# Function that counts NA values for each column
na_counts <- sapply(df, function(x) sum(is.na(x)))
# Calculate the percentage of NA values for each column
na_percentage <- na_counts / nrow(df) * 100
# Display a table with NA counts and percentages
na_table <- data.frame(Column = names(na_counts), NA_Count = na_counts, Percentage = na_percentage, row.names = NULL)
# na_table <- na_table[-1,]
na_table
# Count NA values in departure delay when the arrival delay is zero
zero_count <- sum(df$dep_delay == 0 & is.na(df$arr_delay))
zero_count
correlation_dep_arr <- cor(df$dep_delay, df$arr_delay, use = "complete.obs")
correlation_dep_arr
df <- df %>% select(- arr_delay)
df$arr_delay <- ifelse(is.na(df$arr_delay), df$dep_delay, df$arr_delay)
p_satisf <- ggplot(df, aes(x = sat)) +
geom_bar(aes(fill = sat)) +
geom_text(aes(y = ..count..,
label = paste0(round(prop.table(..count..), 4) * 100, '%')),
stat = 'count',
position = position_dodge(0.3),
size = 4,
vjust = - 0.5) +
scale_fill_manual(values = c("red", "green")) +
labs(title = "Satisfaction Distribution", y = "Count")
p_satisf
# Plot bar chart function
plot_bar_chart <- function(df, var_name) {
var_name <- enquo(var_name)  # Defuse the var_name so it can be evaluated later
plot_var <- ggplot(df, aes(x = !!var_name)) +  # !! to inject the var_name back to evaluate it
geom_bar(aes(fill = sat)) +
geom_text(aes(y = ..count..,
label = paste0(round(prop.table(..count..), 4) * 100, '%')),
stat = 'count',
position = position_dodge(0.3),
size = 4,
vjust = -0.5) +
scale_fill_manual(values = c("red", "green")) +
labs(title = paste0("Satisfaction Distribution for ", quo_name(var_name)),
x = quo_name(var_name), y = "Count")  # quo_name() to return the var_name as string
print(plot_var)
}
# Gender
plot_bar_chart(df, gender)
# Age
df$age_group <- cut(df$age, breaks = seq(0, max(df$age) + 10, by = 10), right = FALSE)
plot_bar_chart(df, age_group)
# Customer type
plot_bar_chart(df, cust_type)
# Type of travel
plot_bar_chart(df, trav_type)
# Customer class
plot_bar_chart(df, class)
df = df[-24]
summary(df)
# Inflight Wifi service
plot_bar_chart(df, wifi)
# Departure/arrival time convenient
plot_bar_chart(df, time_conv)
# Ease of online booking
plot_bar_chart(df, onl_book)
# Gate location
plot_bar_chart(df, gate_loc)
# Food and drink
plot_bar_chart(df, food)
# Online boarding
plot_bar_chart(df, onl_board)
# Seat comfort
plot_bar_chart(df, comfort)
# Inflight entertainment
plot_bar_chart(df, entert)
# Onboard service
plot_bar_chart(df, onb_serv)
# Leg room service
plot_bar_chart(df, leg_room)
# Baggage handling
plot_bar_chart(df, baggage)
# Check-in service
plot_bar_chart(df, checkin)
# Inflight service
plot_bar_chart(df, infl_serv)
# Cleanliness
plot_bar_chart(df, clean)
# Flight distance
p_distance <- ggplot(data = df, aes(distance, color = sat)) +
geom_freqpoly(binwidth = 100, linewidth = 1) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Satisfaction distribution for Flight distance")
# Distance density
p_distancr_den <- ggplot(df, aes(x = distance, fill = sat)) +
geom_density(alpha = 0.5) +
labs(title = "Density Plot of Flight distance",
x = "flight_distance", y = "Density") +
scale_fill_manual(values = c("red", "green"), name = "Satisfaction")
grid.arrange(p_distance, p_distancr_den)
# Departure delay
# I selected delays under 200 min otherwise the graphs look even worse than these
p_dep_del <- ggplot(data = df[df$dep_delay < 200, ],
aes(dep_delay, color = sat)) +
geom_freqpoly(binwidth = 15, linewidth = 0.7) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Satisfaction distribution for Departure delay")
p_dep_del
# Arrival delay
p_arr_del <- ggplot(data = df[df$arr_delay < 200, ],
aes(arr_delay, color = sat)) +
geom_freqpoly(binwidth = 15, linewidth = 0.7) +
scale_color_manual(values = c("red", "green")) +
labs(title = "Satisfaction distribution for Arrival distance")
summary(df)
df$class_Eco <- ifelse(df$class =="Eco", 1, 0)
df$class_Eco_plus <- ifelse(df$class == "Eco Plus", 1, 0)
df$sat <- ifelse(df$sat == "satisfied", 1, 0)
df$gender <- ifelse(df$gender == "Male", 1, 0)
df$cust_type <- ifelse(df$cust_type == "Loyal Customer", 1, 0)
df$class <- ifelse(df$class == 'Eco', 1, 0)
df$trav_type <- ifelse(df$trav_type == 'Personal Travel', 1, 0)
df <- df %>% select(- class)
df <- df %>% relocate(class_Eco, .after = age)
df <- df %>% relocate(class_Eco_plus, .after = class_Eco)
df
df_uns <- df %>% select(- sat)
pca <- prcomp(df_uns, scale = TRUE)
summary(df_uns)
set.seed(123)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(corrr)
library(ggradar)
library(scales)
library(tibble)
# ggradar needs to be installed from github
# > install.packages("remotes")
# > remotes::install_github("ricardo-bion/ggradar")
df <- read_csv("dataset/airline_passenger_satisfaction.csv")
# Subset the df and replace 0 with NA only in the rating variable
df[df == 0] <- NA
df <- na.omit(df)
head(df)
df <- df %>% rename(gender = Gender, cust_type = customer_type,
trav_type = type_of_travel,
class = customer_class,
distance = flight_distance,
wifi = inflight_wifi_service,
time_conv = departure_arrival_time_convenient,
onl_book = ease_of_online_booking,
gate_loc = gate_location,
food = food_and_drink,
onl_board = online_boarding,
comfort = seat_comfort,
entert = inflight_entertainment,
onb_serv  = onboard_service,
leg_room = leg_room_service,
baggage = baggage_handling,
checkin = checkin_service,
infl_serv = inflight_service,
clean = cleanliness,
dep_delay = departure_delay_in_minutes,
arr_delay = arrival_delay_in_minutes,
sat = satisfaction)
summary(df)
df <- df[-1]
df <- df %>% select(- dep_delay)
p_satisf <- ggplot(df, aes(x = sat)) +
geom_bar(aes(fill = sat)) +
geom_text(aes(y = ..count..,
label = paste0(round(prop.table(..count..), 4) * 100, '%')),
stat = 'count',
position = position_dodge(0.3),
size = 4,
vjust = - 0.5) +
scale_fill_manual(values = c("red", "green")) +
labs(title = "Satisfaction Distribution", y = "Count")
p_satisf
# Plot bar chart function
plot_bar_chart <- function(df, var_name) {
var_name <- enquo(var_name)  # Defuse the var_name so it can be evaluated later
plot_var <- ggplot(df, aes(x = !!var_name)) +  # !! to inject the var_name back to evaluate it
geom_bar(aes(fill = sat)) +
geom_text(aes(y = ..count..,
label = paste0(round(prop.table(..count..), 4) * 100, '%')),
stat = 'count',
position = position_dodge(0.3),
size = 4,
vjust = -0.5) +
scale_fill_manual(values = c("red", "green")) +
labs(title = paste0("Satisfaction Distribution for ", quo_name(var_name)),
x = quo_name(var_name), y = "Count")  # quo_name() to return the var_name as string
print(plot_var)
}
# Gender
plot_bar_chart(df, gender)
# Age
df$age_group <- cut(df$age, breaks = seq(0, max(df$age) + 10, by = 10), right = FALSE)
plot_bar_chart(df, age_group)
# Customer type
plot_bar_chart(df, cust_type)
# Type of travel
plot_bar_chart(df, trav_type)
# Customer class
plot_bar_chart(df, class)
summary(df)
df <- df%>% select(-age_group)
df
df$class_Eco <- ifelse(df$class =="Eco", 1, 0)
df$class_Eco_plus <- ifelse(df$class == "Eco Plus", 1, 0)
df$sat <- ifelse(df$sat == "satisfied", 1, 0)
df$gender <- ifelse(df$gender == "Male", 1, 0)
df$cust_type <- ifelse(df$cust_type == "Loyal Customer", 1, 0)
df$class <- ifelse(df$class == 'Eco', 1, 0)
df$trav_type <- ifelse(df$trav_type == 'Personal Travel', 1, 0)
df <- df %>% select(- class)
df <- df %>% relocate(class_Eco, .after = age)
df <- df %>% relocate(class_Eco_plus, .after = class_Eco)
df
df_uns <- df %>% select(- sat)
summary(df_uns)
pca <- prcomp(df_uns, scale = TRUE)
summary(pca)
pve <- 100 * pca$sdev^2 / sum(pca$sdev^2)
par(mfrow = c(1,2))
plot(pve, type = 'o', ylab = 'PVE',
xlab = "Principal Component", col = "blue")
plot(cumsum(pve), type = "o", ylab = "Cumulative PVE",
xlab = "Principal Component", col = "brown3")
# Determine number of clusters
wss <- (nrow(df_uns)-1)*sum(apply(df_uns,2,var))
for (i in 2:10) wss[i] <- sum(kmeans(df_uns,
centers=i)$withinss)
plot(1:10, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
km <- kmeans(pca$x[, 1:11], 3, nstart = 20)
plot(pca$x[,1:2], col = alpha(km$cluster + 1, 0.5), pch = 20, cex = .2)
k <- kmeans(df_uns, 3, nstart = 25, iter.max = 1000)
k <- kmeans(df_uns, 3, nstart = 20)
sort(table(k$clust))
clust <- names(sort(table(k$clust)))
df$cluster = k$clust
ggplot(df, aes(x=cluster)) + geom_bar(aes(fill = as.factor(sat))) + scale_fill_manual(values = c("red", "green"))
sort(table(km$clust))
clust <- names(sort(table(km$clust)))
df$cluster = km$clust
ggplot(df, aes(x=cluster)) + geom_bar(aes(fill = as.factor(sat))) + scale_fill_manual(values = c("red", "green"))
library(factoextra)
# Extract the results for variables
var <- get_pca_var(pca)
# Contributions of variables to PC1
fviz_contrib(pca, choice = "var", axes = 1, top = 10)
# Contributions of variables to PC2
fviz_contrib(pca, choice = "var", axes = 2, top = 10)
summary(df)
df <- df %>% select(-cluster)
summary(df)
library(caret)
split_train_test <- createDataPartition(df$sat, p=0.8, list=FALSE)
dtrain <- df[split_train_test,]
dtest <-  df[-split_train_test,]
logistic_model <-glm(sat ~., data=dtrain , family="binomial" )
summary <- summary (logistic_model)
round(summary$coefficients, digits = 3)
logistic_prediction <- predict(logistic_model, dtest, type="response")
# Set a threshold for classification
threshold <- 0.5
# Convert the predicted probabilities (through logistic model) to binary predictions based on the threshold
logistic_prediction_binary <- ifelse(logistic_prediction > threshold, 1, 0)
# Create a table of predicted values vs. actual values
confusion_matrix <- table(logistic_prediction_binary, dtest$sat)
# Print the confusion table
print(confusion_matrix)
print(mean(logistic_prediction_binary==dtest$sat))
library(pROC)
test_roc = roc(dtest$sat ~ logistic_prediction, plot = TRUE, print.auc = TRUE)
library(MASS)
lda_model <- lda(sat~.,data = dtrain)
lda_model
plot(lda_model)
lda_prediction = predict(lda_model, dtest)
lda_class_prediction = lda_prediction$class
# this prediction yields the class. This will be useful to compute the confusion matrix, because there we will not need the probabilities!
table(lda_class_prediction, dtest$sat)
mean(lda_class_prediction==dtest$sat)
lda_probabilities_prediction = lda_prediction$posterior[, "1"]  # either write 0 or 1!
# given the output produced by predict() we only take the "posterior" column, which gives us the predicted probabilities [0,1] that we need to build the ROC.
# to understand this: if you print "predict(lda_model, dtest)$posterior" we can see that we have two columns, which are complementary. So, we just need one column of them.
test_roc = roc(dtest$sat ~ lda_probabilities_prediction, plot = TRUE, print.auc = TRUE)
qda_model <- qda(sat~.,data = dtrain)
qda_model
qda_prediction = predict(qda_model, dtest)
qda_class_prediction = qda_prediction$class
table(qda_class_prediction, dtest$sat)
mean(qda_class_prediction==dtest$sat)
qda_probabilities_prediction <- qda_prediction$posterior[,"1"]
test_roc = roc(dtest$sat ~ qda_probabilities_prediction, plot = TRUE, print.auc = TRUE)
library(class)
# create Data Domain X for the TRAINING set
train_X = dtrain[-23]
# create Data Domain X for the TEST set
test_X= dtest[-23]
# labels of the training set
train_Y = dtrain$sat
# labels of the test set
test_Y = dtest$sat
library(ggplot2)
# Define the range of k values to evaluate
k_values <- c(1,3,5,7,9)
# Initialize an empty vector to store the accuracies
accuracies <- c()
# Compute the accuracy for each k value
for (k in k_values) {
knn_prediction <- knn(train_X, test_X, train_Y, k = k)
accuracy <- mean(knn_prediction == test_Y)
accuracies <- c(accuracies, accuracy)
}
# Create a data frame with the k values and accuracies
acc_data <- data.frame(k = k_values, accuracy = accuracies)
# Plot the elbow plot
ggplot(acc_data, aes(x = k, y = accuracy)) +
geom_line() +
geom_point() +
labs(x = "k", y = "Accuracy") +
ggtitle(" Accuracy for KNN")
# Initialize an empty vector to store the error rates
error_rates <- c()
k_values <- c(1,3,5,7,9)
for (i in acc_data$accuracy){
error_rate <- 1 - i
error_rates <- c(error_rates, error_rate)
}
# Create a data frame with the k values and error rates
err_data <- data.frame(k = k_values, error_rate = error_rates)
# Plot the error rate plot
ggplot(err_data, aes(x = k, y = error_rate)) +
geom_line() +
geom_point() +
labs(x = "k", y = "Error Rate") +
ggtitle("Error Rate Plot for KNN")
five_nn_prediction <- knn(train_X, test_X, train_Y, k = 7, prob=TRUE)
confusion_matrix_knn <- table(test_Y, five_nn_prediction)
confusion_matrix_knn
mean(five_nn_prediction==test_Y)
library(rpart)
# Convert the response variable to a factor
dtrain$sat <- as.factor(dtrain$sat)
dtest$sat <- as.factor(dtest$sat)
# Train the rpart model
tree_model <- rpart(sat ~ ., data = dtrain)
# Make predictions on the test set
predictions <- predict(tree_model, newdata = dtest, type = "class")
accuracy <- sum(predictions == dtest$sat) / nrow(dtest) * 100
# Print the accuracy
cat("Accuracy: ", accuracy, "%\n")
library(rpart.plot)
rpart.plot(tree_model)
# Calculate test error rates
error_logreg <- mean(logistic_prediction_binary != test_Y)
error_lda <- mean(lda_class_prediction != test_Y)
error_qda <- mean(qda_class_prediction != test_Y)
error_5nn <- mean(five_nn_prediction != test_Y)
error_tree <- mean(predictions != test_Y)
# Create a data frame with method and error rate information
dataaaa <- data.frame(Method = c("Logistic Regression", "LDA", "QDA", "5-NN","TREE"),
Error_Rate = c(error_logreg, error_lda, error_qda, error_5nn, error_tree))
# Plot barplot
ggplot(dataaaa, aes(x = Method, y = Error_Rate)) +
geom_bar(stat = "identity", fill = "Red") +
ylab("Test Error Rate") +
ggtitle("Barplot of Test Error Rates") +
theme_bw()
set.seed(123)
library(tidyverse)
library(dplyr)
library(ggplot2)
library(grid)
library(gridExtra)
library(corrr)
library(ggradar)
library(scales)
library(tibble)
# ggradar needs to be installed from github
# > install.packages("remotes")
# > remotes::install_github("ricardo-bion/ggradar")
df <- read_csv("dataset/airline_passenger_satisfaction.csv")
df <- df %>% rename(gender = Gender, cust_type = customer_type,
trav_type = type_of_travel,
class = customer_class,
distance = flight_distance,
wifi = inflight_wifi_service,
time_conv = departure_arrival_time_convenient,
onl_book = ease_of_online_booking,
gate_loc = gate_location,
food = food_and_drink,
onl_board = online_boarding,
comfort = seat_comfort,
entert = inflight_entertainment,
onb_serv  = onboard_service,
leg_room = leg_room_service,
baggage = baggage_handling,
checkin = checkin_service,
infl_serv = inflight_service,
clean = cleanliness,
dep_delay = departure_delay_in_minutes,
arr_delay = arrival_delay_in_minutes,
sat = satisfaction)
colnames(df)
# Subset the df and replace 0 with NA only in the rating variable
df[df[8:21] == 0] <- NA
df[8:21] == 0
df[df[8:21] == 0]
df_without_zero <- df[8:21]
df_without_zero <- df[8:21]
df_without_zero[df_without_zero == 0 ] <- NA
df[8:21] = df_without_zero
df <- read_csv("dataset/airline_passenger_satisfaction.csv")
df <- df %>% rename(gender = Gender, cust_type = customer_type,
trav_type = type_of_travel,
class = customer_class,
distance = flight_distance,
wifi = inflight_wifi_service,
time_conv = departure_arrival_time_convenient,
onl_book = ease_of_online_booking,
gate_loc = gate_location,
food = food_and_drink,
onl_board = online_boarding,
comfort = seat_comfort,
entert = inflight_entertainment,
onb_serv  = onboard_service,
leg_room = leg_room_service,
baggage = baggage_handling,
checkin = checkin_service,
infl_serv = inflight_service,
clean = cleanliness,
dep_delay = departure_delay_in_minutes,
arr_delay = arrival_delay_in_minutes,
sat = satisfaction)
df_without_zero <- df[8:21]
df_without_zero[df_without_zero == 0 ] <- NA
df_without_zero <- na.omit(df_without_zero)
df[8:21] = df_without_zero
df <- read_csv("dataset/airline_passenger_satisfaction.csv")
df_1 <- df[8:21]
summary(df_1)
df <- df %>% rename(gender = Gender, cust_type = customer_type,
trav_type = type_of_travel,
class = customer_class,
distance = flight_distance,
wifi = inflight_wifi_service,
time_conv = departure_arrival_time_convenient,
onl_book = ease_of_online_booking,
gate_loc = gate_location,
food = food_and_drink,
onl_board = online_boarding,
comfort = seat_comfort,
entert = inflight_entertainment,
onb_serv  = onboard_service,
leg_room = leg_room_service,
baggage = baggage_handling,
checkin = checkin_service,
infl_serv = inflight_service,
clean = cleanliness,
dep_delay = departure_delay_in_minutes,
arr_delay = arrival_delay_in_minutes,
sat = satisfaction)
df_1 <- df[8:21]
summary(df_1)
df_1[df_1 == 0] <- NA
df_filtered <- df[!apply(df[, 8:21] == 0, 1, any), ]
summary(df_filtered)
